# scripts/monitor_files.py
import time
import os
import django
import re
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# --- Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng Django ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BauCuProject.settings')
django.setup()
# ------------------------------------

# Import c√°c h√†m v√† model c·∫ßn thi·∫øt t·ª´ project c·ªßa b·∫°n
from django.conf import settings
from quanly.models import Ballot
from quanly.blockchain_utils import (
    verify_blockchain_integrity,
    backup_tampered_file,
    restore_from_backup,
    log_tampering_event,
    get_decrypted_results_path,
    verify_decrypted_results_integrity,
    backup_tampered_file_for_results,
    restore_from_backup_for_results
)

# ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n c·∫ßn theo d√µi
BLOCKCHAIN_DIR = os.path.join(settings.BASE_DIR, 'quanly', 'save_blockchain')
RESULTS_DIR = os.path.join(settings.BASE_DIR, 'quanly', 'save_blockchain_result')

class FileChangeHandler(FileSystemEventHandler):
    def __init__(self):
        # D√πng dictionary ƒë·ªÉ l∆∞u l·∫°i th·ªùi gian x·ª≠ l√Ω cu·ªëi c√πng c·ªßa m·ªói file
        self.last_processed = {}
        self.debounce_interval = 2  # Gi√¢y

    def on_modified(self, event):
        if event.is_directory:
            return

        filepath = event.src_path
        filename = os.path.basename(filepath)
        
        if "_tampered_" in filename:
            return

        # --- LOGIC M·ªöI: Ch·ªëng x·ª≠ l√Ω l·∫∑p l·∫°i (Debouncing) ---
        current_time = time.time()
        last_time = self.last_processed.get(filepath, 0)

        if (current_time - last_time) < self.debounce_interval:
            # N·∫øu s·ª± ki·ªán x·∫£y ra qu√° nhanh, b·ªè qua n√≥
            return
        
        # C·∫≠p nh·∫≠t l·∫°i th·ªùi gian x·ª≠ l√Ω
        self.last_processed[filepath] = current_time
        # --- K·∫æT TH√öC LOGIC M·ªöI ---

        print(f"\n[PH√ÅT HI·ªÜN THAY ƒê·ªîI] File: {filename}")

        # S·ª≠ d·ª•ng regex m·∫°nh m·∫Ω h∆°n ƒë·ªÉ tr√≠ch xu·∫•t ballot_id
        match = re.search(r'blockchain_.+?_(\d+)', filename)
        if not match:
            return
        
        ballot_id = int(match.group(1))
        try:
            ballot = Ballot.objects.get(pk=ballot_id)
        except Ballot.DoesNotExist:
            return

        # Ki·ªÉm tra xem ƒë√¢y l√† file blockchain g·ªëc hay file k·∫øt qu·∫£
        if "decrypted_results" in filename:
            is_valid, msg = verify_decrypted_results_integrity(ballot_id, RESULTS_DIR)
            if not is_valid:
                print(f"ÔøΩ C·∫¢NH B√ÅO: Ph√°t hi·ªán h√†nh vi s·ª≠a ƒë·ªïi file k·∫øt qu·∫£ '{filename}'. Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi l·∫°i.")
                backup_path = backup_tampered_file_for_results(ballot_id, RESULTS_DIR)
                log_tampering_event(
                    ballot=ballot,
                    verify_msg=f"FILE K·∫æT QU·∫¢: {msg}",
                    user=None,
                    ip_address="127.0.0.1 (System Monitor)",
                    backup_path=backup_path,
                    file_type='results'
                )
                if restore_from_backup_for_results(ballot_id, RESULTS_DIR):
                    print("‚úÖ H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ph·ª•c h·ªìi file t·ª´ b·∫£n sao l∆∞u an to√†n.")
                else:
                    print("‚ùå L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ ph·ª•c h·ªìi file k·∫øt qu·∫£!")
        else:
            is_valid, msg = verify_blockchain_integrity(ballot_id, BLOCKCHAIN_DIR)
            if not is_valid:
                print(f"üö® C·∫¢NH B√ÅO: Ph√°t hi·ªán h√†nh vi s·ª≠a ƒë·ªïi file blockchain '{filename}'. Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi l·∫°i.")
                backup_path = backup_tampered_file(ballot_id, BLOCKCHAIN_DIR)
                log_tampering_event(
                    ballot=ballot,
                    verify_msg=f"FILE BLOCKCHAIN: {msg}",
                    user=None,
                    ip_address="127.0.0.1 (System Monitor)",
                    backup_path=backup_path,
                    file_type='blockchain'
                )
                if restore_from_backup(ballot_id, BLOCKCHAIN_DIR):
                    print("‚úÖ H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ph·ª•c h·ªìi file t·ª´ b·∫£n sao l∆∞u an to√†n.")
                else:
                    print("‚ùå L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ ph·ª•c h·ªìi file blockchain!")

def run():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y script."""
    event_handler = FileChangeHandler()
    observer = Observer()
    
    os.makedirs(BLOCKCHAIN_DIR, exist_ok=True)
    os.makedirs(RESULTS_DIR, exist_ok=True)
    
    observer.schedule(event_handler, BLOCKCHAIN_DIR, recursive=True)
    observer.schedule(event_handler, RESULTS_DIR, recursive=True)
    
    observer.start()
    print(f"üöÄ B·∫Øt ƒë·∫ßu gi√°m s√°t c√°c th∆∞ m·ª•c an ninh...")
    print(f" - Th∆∞ m·ª•c Blockchain: {os.path.abspath(BLOCKCHAIN_DIR)}")
    print(f" - Th∆∞ m·ª•c K·∫øt qu·∫£: {os.path.abspath(RESULTS_DIR)}")
    print("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
